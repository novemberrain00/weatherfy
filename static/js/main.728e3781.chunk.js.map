{"version":3,"sources":["reducers/index.js","store.js","actions/index.js","services/index.js","components/hoc/withCard.js","components/ajaxLoader/index.js","components/ajaxLoader/ajaxLoader.js","components/card/card.js","components/card/index.js","components/modal/modal.js","components/modal/index.js","components/citiesList/citiesList.js","components/citiesList/index.js","components/hoc/withSearch.js","components/search/search.js","components/search/index.js","components/theme-changer/themeChanger.js","components/theme-changer/index.js","components/hamburger/hamburger.js","components/hamburger/index.js","components/currentCity/currentCity.js","components/currentCity/index.js","components/appHeader/index.js","components/appHeader/appHeader.js","components/menuListItem/index.js","components/menuListItem/menuListItem.js","components/menuList/menuList.js","components/menuList/index.js","components/app/app.js","components/app/index.js","index.js"],"names":["initialMenuState","menuOpened","initialThemeState","isThemeDark","initialSearchState","choosedCities","city","isActiveCityExist","initialWeatherState","data","wind","iconPath","rootReducer","combineReducers","menu","state","action","type","theme","search","weather","path","store","createStore","searchCityChanged","searchingCitiesChanged","list","setActiveCity","weatherUpdate","WeatherService","getWeather","a","fetch","url","response","ok","Error","json","result","getCitiesList","this","WithCard","Card","props","componentDidMount","then","res","dispatch","main","icon","catch","err","temp_min","temp_max","pressure","speed","date","Date","dateOfMonth","getDate","dayNumber","getDay","monthNumber","getMonth","day","month","AjaxLoader","src","className","alt","Component","tempMax","tempMin","checkData","isNaN","Math","floor","to","connect","Modal","CitiesList","onMenuItemClick","includes","slice","indexOf","closeList","description","map","i","onClick","WithSearch","Search","allCities","inputValue","forEach","country","areas","area","push","name","getCitiesByLetters","e","str","target","value","toLowerCase","onInput","placeholder","ThemeChanger","ballClassList","changerClassList","Hamburger","classList","CurrentCity","AppHeader","MenuListItem","href","MenuList","App","styles","boxShadow","setBoxShadowByMouseMove","bind","pos","pageX","setState","style","onMouseMove","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.728e3781.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\r\n\r\nconst initialMenuState = {\r\n    menuOpened: false\r\n}\r\n\r\nconst initialThemeState = {\r\n    isThemeDark: false\r\n}\r\n\r\nconst initialSearchState = {\r\n    choosedCities: [],        //all cities starting with user input\r\n    city: 'Москва',           //choosed city\r\n    isActiveCityExist: false  //if user choosed a city on his own - true, else - false\r\n}\r\n\r\nconst initialWeatherState = {\r\n    data: {},     //the main data of weather. Here is such parametres as max or min temreture and pressure\r\n    wind: {},     //data of wind\r\n    iconPath: {}  //icon of current weather. Contains absoute path\r\n}\r\n\r\nconst menuReducer = (state = initialMenuState, action) => {\r\n    switch(action.type) {\r\n        case 'MENU_OPENED': \r\n            return {\r\n                menuOpened: !state.menuOpened,\r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nconst themeReducer = (state = initialThemeState, action) => {\r\n    switch(action.type) {\r\n        case 'THEME_CHANGED': \r\n            return {\r\n                isThemeDark: !state.isThemeDark\r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nconst searchReducer = (state = initialSearchState, action) => {\r\n    switch(action.type) {\r\n        case 'CITY_CHANGED':\r\n            return {\r\n                ...state,\r\n                city: action.city\r\n            }\r\n        case 'SEARCHING_CITIES_CHANGED':\r\n            return {\r\n                ...state,\r\n                choosedCities: action.choosedCities\r\n            }\r\n        case 'SET_ACTIVE_CITY':\r\n            return {\r\n                ...state,\r\n                isActiveCityExist: action.isActiveCityExist\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst weatherReducer = (state = initialWeatherState, action) => {\r\n    switch(action.type) {\r\n        case 'WEATHER_UPDATE':\r\n            return {\r\n                ...state,\r\n                data: action.data,\r\n                wind: action.wind\r\n            }\r\n        case 'ICON_CHANGED':\r\n            return {\r\n                ...state,\r\n                iconPath: action.path\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    menu: menuReducer, \r\n    theme: themeReducer, \r\n    search: searchReducer,\r\n    weather: weatherReducer\r\n    })\r\n\r\nexport default rootReducer;","import {createStore} from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","const menuOpened = () => {\r\n    return {\r\n        type: 'MENU_OPENED'\r\n    }\r\n}\r\n\r\nconst themeChanged = () => {\r\n    return {\r\n        type: 'THEME_CHANGED'\r\n    }\r\n}\r\n\r\nconst searchCityChanged = (city) => {\r\n    return {\r\n        type: 'CITY_CHANGED',\r\n        city\r\n    }\r\n}\r\n\r\nconst searchingCitiesChanged = (list) => {\r\n    return {\r\n        type: 'SEARCHING_CITIES_CHANGED',\r\n        choosedCities: list\r\n    }\r\n}\r\n\r\nconst setActiveCity = (isActiveCityExist) => {\r\n    return {\r\n        type: 'SET_ACTIVE_CITY',\r\n        isActiveCityExist\r\n    }\r\n}\r\n\r\nconst weatherUpdate = (data, wind) => {\r\n    return {\r\n        type: 'WEATHER_UPDATE',\r\n        data,\r\n        wind\r\n    }\r\n}\r\n\r\nconst iconChanged = (path) => {\r\n    return {\r\n        type: 'ICON_CHANGED',\r\n        path\r\n    }\r\n}\r\n\r\nexport {\r\n    menuOpened,\r\n    themeChanged,\r\n    searchCityChanged,\r\n    searchingCitiesChanged,\r\n    setActiveCity,\r\n    weatherUpdate,\r\n    iconChanged\r\n}","export default class WeatherService {\r\n    constructor(city) {\r\n        this.url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=761d1d1888eebee3b64ce48fc5680f64&lang=ru&units=metric`;\r\n    }\r\n    \r\n    getWeather = async () => {\r\n        const response = await fetch(this.url);\r\n          \r\n        if (!response.ok) {\r\n            throw new Error('Server Error');\r\n        }\r\n        const result = await response.json();\r\n        return result;\r\n    }\r\n\r\n    getCitiesList = async () => {\r\n        const response = await fetch('https://api.hh.ru/areas');\r\n          \r\n        if (!response.ok) {\r\n            throw new Error('Server Error');\r\n        }\r\n        const result = await response.json();\r\n        return result;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport store from '../../store';\r\nimport { weatherUpdate, iconChanged } from '../../actions';\r\nimport WeatherService from '../../services';\r\n\r\nconst WithCard = () => (Card) => {\r\n\r\n    return (props) =>  {\r\n\r\n        const componentDidMount = async () => {\r\n\r\n            //get default weather for Moscow\r\n            await new WeatherService(\"Москва\").getWeather()\r\n            .then(res => {\r\n                store.dispatch(weatherUpdate(res.main, res.wind));\r\n                store.dispatch(iconChanged(`http://openweathermap.org/img/wn/${res.weather[0].icon}@2x.png`))\r\n            })\r\n            .catch(err => {\r\n                const data = {\r\n                    temp_min: 'Ошибка',\r\n                    temp_max: 'Ошибка',\r\n                    pressure: 'Ошибка'\r\n\r\n                },\r\n\r\n                wind = {\r\n                    speed: 'Ошибка'\r\n                };\r\n\r\n\r\n                store.dispatch(weatherUpdate(data, wind));\r\n            });\r\n        }\r\n\r\n        const days = [\r\n            'Воскресенье',\r\n            'Понедельник',\r\n            'Вторник',\r\n            'Среда',\r\n            'Четверг',\r\n            'Пятница',\r\n            'Суббота'\r\n        ],\r\n        months = [\r\n            'Января',\r\n            'Февраля',\r\n            'Марта',\r\n            'Апреля',\r\n            'Мая',\r\n            'Июня',\r\n            'Июля',\r\n            'Августа',\r\n            'Сентября',\r\n            'Октября',\r\n            'Ноября',\r\n            'Декабря'\r\n        ],\r\n        date = new Date(),             //object of date\r\n        dateOfMonth = date.getDate(),  //day of month\r\n        dayNumber = date.getDay(),     //today's number\r\n        monthNumber = date.getMonth(); //number of current month\r\n        \r\n        return(\r\n            <Card \r\n                {...props} \r\n                componentDidMount={ componentDidMount }\r\n                day={ days[dayNumber] }\r\n                month={ months[monthNumber] }\r\n                dateOfMonth={ dateOfMonth }\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default WithCard;","import AjaxLoader from \"./ajaxLoader\";\r\nexport default AjaxLoader;","import React, {Component} from 'react';\r\nimport './ajax-loader.css';\r\n\r\nexport default class AjaxLoader extends Component {\r\n    render() {\r\n        return <img src=\"ajax-loader.gif\" className=\"ajax-loader\" alt=\"Loading...\"/>\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport WithCard from '../hoc/withCard';\r\nimport AjaxLoader from '../ajaxLoader';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport './card.css';\r\n\r\nclass Card extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.componentDidMount()\r\n    }\r\n\r\n    render() {\r\n        \r\n        let {tempMax, tempMin, iconPath, day, month, dateOfMonth} = this.props; \r\n        \r\n        //theese values get string as value only when fetch ends with error\r\n        const checkData = (data) => {\r\n            switch(typeof(data)) {\r\n                case 'string':\r\n                    return 'Ошибка';\r\n                case 'number':\r\n                    return isNaN(data) ? false : Math.floor(data) + ' °';\r\n                default:\r\n                    return null;;\r\n                \r\n            }\r\n        }\r\n\r\n        tempMax = checkData(tempMax);\r\n        tempMin = checkData(tempMin);\r\n\r\n        return (\r\n            <>\r\n                <div className=\"card-wrapper\">\r\n                    <div className=\"card\">\r\n                        <div className=\"card__top\">\r\n                            <h3 className=\"card__day\">{ day }</h3>\r\n                            <span className=\"card__date\">{ dateOfMonth } { month }</span>\r\n                        </div>\r\n                        <div className=\"card__content\">\r\n                            <div className=\"card__daytime\">\r\n                                <h5 className=\"card__daytime-title\">Днём</h5>\r\n                                <div className=\"card__data\">\r\n                                    <span className=\"card__daytime-temp\">{tempMax || <AjaxLoader/>}</span>\r\n                                    <span className=\"card__daytime-weather\">\r\n                                        <img src={iconPath || 'ajax-loader.gif'} alt=\"sunny\"></img>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card__daytime\">\r\n                                <h5 className=\"card__daytime-title\">Ночью</h5>\r\n                                <div className=\"card__data\">\r\n                                    <span className=\"card__daytime-temp\">{tempMin || <AjaxLoader/>}</span>\r\n                                    <span className=\"card__daytime-weather\"><img src={iconPath || 'ajax-loader.gif'}  alt=\"sunny\"></img></span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"card__bottom\">\r\n                            <Link to=\"/more-info\" className=\"card__link\">Подробнее</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n} \r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tempMax: state.weather.data.temp_max,\r\n        tempMin: state.weather.data.temp_min,\r\n        iconPath: state.weather.iconPath\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(WithCard()(Card));","import Card from './card';\r\nexport default Card;","import React, { Component } from 'react';\r\nimport AjaxLoader from '../ajaxLoader'\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport WithCard from '../hoc/withCard';\r\nimport './modal.css'\r\n\r\nclass Modal extends Component {\r\n    componentDidMount() {\r\n        this.props.componentDidMount()\r\n    }\r\n\r\n    render() {\r\n\r\n        let { speed, pressure } = this.props\r\n\r\n        //theese values get string as value only when fetch ends with error\r\n        speed = typeof(speed) === 'string' ? speed : Math.floor(speed) + ' м/с'; \r\n        pressure = typeof(pressure) === 'string' ? pressure : Math.floor(pressure / 133) + ' м/с';\r\n\r\n\r\n        return (\r\n            <div className=\"modal\">\r\n                <div className=\"modal__top\">\r\n                    <h1 className=\"modal__title\">Подробная информация</h1>\r\n                </div>\r\n                <div className=\"modal__content\">\r\n                    <table className=\"modal__table\">\r\n                        <tbody>\r\n                            <tr className=\"modal__table-item\">\r\n                                <td>\r\n                                    Скорость ветра:\r\n                                </td>\r\n                                <td>\r\n                                    { speed || <AjaxLoader/> } \r\n                                </td>\r\n                            </tr>\r\n                            <tr className=\"modal__table-item\">\r\n                                <td>\r\n                                    Атмосферное давление:\r\n                                </td> \r\n                                <td>\r\n                                    { pressure || <AjaxLoader/>}\r\n                                </td>\r\n                            </tr>   \r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"modal__bottom\">\r\n                    <Link to=\"/weatherfy\" className=\"modal__link\">Скрыть</Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        pressure: state.weather.data.pressure,\r\n        speed: state.weather.wind.speed\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(WithCard()(Modal));","import Modal from './modal';\r\nexport default Modal;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport store from '../../store';\r\nimport WeatherService from '../../services';\r\nimport { searchCityChanged, weatherUpdate, setActiveCity } from '../../actions';\r\n\r\nimport './citiesList.css';\r\n\r\nclass CitiesList extends Component {\r\n\r\n    onMenuItemClick = async (city) => {\r\n\r\n         //it's required be for processing cities which marked with their districts. For example: Москва (Московская область)\r\n        if(city.includes(' (')) {   \r\n            city = city.slice(0, city.indexOf(' ('));\r\n        }\r\n\r\n        store.dispatch(searchCityChanged(city))\r\n        this.props.closeList();\r\n\r\n        //set new weather for city which was choosed by user\r\n        await new WeatherService(city).getWeather()\r\n        .then(res => {\r\n            store.dispatch(setActiveCity(true));\r\n            store.dispatch(weatherUpdate(res.main, res.weather[0].description, res.wind));\r\n        })\r\n    }\r\n \r\n    render() {\r\n        if(this.props.choosedCities) {\r\n            return(\r\n                <ul className=\"cities-list\">\r\n                    {\r\n                        this.props.choosedCities.map((city, i) => {\r\n                            return <li \r\n                                onClick={ ()=>{ this.onMenuItemClick(city) } } \r\n                                className=\"cities-list_item\" \r\n                                key={city + i}\r\n                                >{city}</li>\r\n                        })\r\n                    }\r\n                </ul>\r\n            )\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        choosedCities: state.search.choosedCities\r\n    }\r\n} \r\n\r\nexport default connect(mapStateToProps)(CitiesList);","import CitiesList from './citiesList';\r\nexport default CitiesList;","import React from 'react';\r\nimport WeatherService from '../../services/index';\r\nimport { searchCityChanged, searchingCitiesChanged, setActiveCity } from '../../actions';\r\nimport store from '../../store';\r\n\r\nconst WithSearch = () => (Search) => {\r\n    let allCities = []; //in future it will be contain all possible cities to choose\r\n\r\n    return (props) => {\r\n        let choosedCities = [], //all cities starting with user input\r\n            inputValue = '';    //value of field of search\r\n\r\n        const getCitiesByLetters = (e) => {\r\n            inputValue = e.target.value;  \r\n            const str = inputValue.toLowerCase();\r\n\r\n            store.dispatch(setActiveCity(false))  //remove city choosed earlier\r\n\r\n            if(str) {  //choosing all cities satrting with user input\r\n                allCities.forEach(city => {\r\n                    if(city.toLowerCase().indexOf(str) === 0) {\r\n                        choosedCities.push(city);\r\n                    }\r\n                }) \r\n            }\r\n\r\n            store.dispatch(searchingCitiesChanged(choosedCities))\r\n            store.dispatch(searchCityChanged(inputValue)); \r\n        }\r\n    \r\n        const componentDidMount = async () => {\r\n            const list = [];\r\n    \r\n            //fill allList by cities which parsed from https://api.hh.ru/areas\r\n            await new WeatherService().getCitiesList()\r\n            .then(data => {\r\n                data.forEach(country => {\r\n                    country.areas.forEach(area => { //parsing all countries\r\n                        area.areas.forEach(city => { //parsing all republicks, districts, etc\r\n                            list.push(city.name)\r\n                        })\r\n                    })\r\n                })\r\n                \r\n                allCities = list; \r\n            })\r\n\r\n        }\r\n\r\n        const closeList = () => { //it happens when user clicks on city from list or delete all from searching panel\r\n            store.dispatch(searchingCitiesChanged([])); \r\n        }\r\n\r\n        return (\r\n            <Search \r\n                getCitiesByLetters={getCitiesByLetters} \r\n                componentDidMount={componentDidMount}\r\n                inputValue={inputValue}\r\n                closeList={closeList}\r\n                {...props}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WithSearch;","import React, {Component} from 'react';\r\nimport CitiesList from '../citiesList';\r\nimport WithSearch from '../hoc/withSearch';\r\nimport { connect } from 'react-redux';\r\nimport './search.css';\r\n\r\nclass Search extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.componentDidMount()\r\n    }\r\n\r\n    render() {\r\n\r\n        const {city, inputValue, getCitiesByLetters, choosedCities, closeList} = this.props;\r\n\r\n        this.inputValue = city ? city : inputValue; \r\n\r\n        return (\r\n            <div className=\"search-wrapper\">\r\n                <input \r\n                    value={this.inputValue}\r\n                    onInput={getCitiesByLetters}\r\n                    className=\"search\" placeholder=\"Город\"\r\n                />\r\n                \r\n                <CitiesList \r\n                    closeList={closeList} \r\n                    inputValue={inputValue} \r\n                    list={choosedCities}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        city: state.search.city \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(WithSearch()(Search))","import Search from './search';\r\nexport default Search;","import React, {Component} from 'react';\r\nimport './themeChanger.css';\r\nimport {themeChanged} from '../../actions'\r\nimport { connect } from 'react-redux';\r\nimport store from '../../store';\r\n\r\nclass ThemeChanger extends Component {\r\n    render() {\r\n        const ballClassList = this.props.isThemeDark ? 'theme-changer__ball theme-changer__ball_enabled' : 'theme-changer__ball',\r\n            changerClassList = this.props.isThemeDark ? 'theme-changer theme-changer_dark' : 'theme-changer';\r\n\r\n\r\n        return (\r\n            <div className={changerClassList} onClick={() => {store.dispatch(themeChanged())}}>\r\n                <div className={ballClassList}></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isThemeDark: state.theme.isThemeDark\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ThemeChanger);","import ThemeChanger from './themeChanger';\r\nexport default ThemeChanger;","import React, {Component} from 'react';\r\nimport './hamburger.css';\r\nimport { menuOpened } from '../../actions';\r\nimport { connect } from 'react-redux';\r\nimport store from '../../store';\r\n\r\n\r\nclass Hamburger extends Component {\r\n    render() {\r\n\r\n        const classList = this.props.menuOpened ? 'hamburger hamburger_active' : 'hamburger';\r\n\r\n        return (\r\n            <div onClick={() => {store.dispatch(menuOpened())}} className={classList}>\r\n                <span className=\"hamburger__line\"></span>\r\n                <span className=\"hamburger__line\"></span>\r\n                <span className=\"hamburger__line\"></span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        menuOpened: state.menu.menuOpened\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Hamburger);","import Hamburger from './hamburger';\r\nexport default Hamburger;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './currentCity.css';\r\n\r\nclass CurrentCity extends Component{\r\n    render() {\r\n\r\n        //\"isActiveCityExist\" neccesary to tell to user does he choosed a city and \"city\" tells what this city is\r\n        const city = this.props.isActiveCityExist ? this.props.city : 'Не выбран';\r\n\r\n        return(\r\n            <p className=\"current-city\">Город: { city }</p>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isActiveCityExist: state.search.isActiveCityExist,\r\n        city: state.search.city\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(CurrentCity)","import CurrentCity from \"./currentCity\";\r\nexport default CurrentCity;","import AppHeader from './appHeader';\r\nexport default AppHeader;","import React, {Component} from 'react';\r\nimport Search from '../search';\r\nimport ThemeChanger from '../theme-changer';\r\nimport Hamburger from '../hamburger';\r\nimport CurrentCity from '../currentCity';\r\nimport './appHeader.css';\r\n\r\nexport default class AppHeader extends Component {\r\n    render() {\r\n        return(\r\n            <div className=\"app-header\">\r\n                <Hamburger/>\r\n                <Search/>\r\n                <ThemeChanger/>\r\n                <CurrentCity/>\r\n            </div>\r\n        )\r\n    }\r\n}","import MenuListItem from './menuListItem';\r\nexport default MenuListItem;","import React, {Component} from 'react';\r\nimport './menuListItem.css';\r\n\r\nexport default class MenuListItem extends Component {\r\n    render() {\r\n        return (\r\n            <li className=\"menu-list__item\"><a className=\"menu-list__link\" href=\"#\">Главная</a></li>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, {Component} from 'react';\r\nimport MenuListItem from '../menuListItem';\r\nimport './menuList.css';\r\nimport {connect} from 'react-redux';\r\n\r\nclass MenuList extends Component {\r\n    render() {\r\n        const classList = this.props.menuOpened ? 'menu-list menu-list_active' : 'menu-list';\r\n        return (\r\n            <ul className={classList}>\r\n                <MenuListItem/>\r\n                <MenuListItem/>\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        menuOpened: state.menu.menuOpened\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MenuList);","import MenuList from './menuList';\r\nexport default MenuList;","import React, {Component} from 'react';\nimport Card from '../card';\nimport Modal from '../modal';\nimport AppHeader from '../appHeader';\nimport MenuList from '../menuList';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './app.css';\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            styles: {\n                boxShadow: `-304px 0px 1000px 100px rgb(0 159 255 / 69%) inset`\n            }\n        }\n\n        this.setBoxShadowByMouseMove = this.setBoxShadowByMouseMove.bind(this)\n    }\n\n    setBoxShadowByMouseMove(e) {  //set new inner shadow when moving mouse4\n        const pos = e.pageX;\n        this.setState({styles: {boxShadow: `${pos-800}px 0px 1000px 100px rgb(0 159 255 / 69%) inset`}})\n\n    }\n    \n    render() {\n\n        let classList = this.props.isThemeDark ? 'app dark' : 'app';\n\n        return (\n            <div style={this.state.styles} onMouseMove={this.setBoxShadowByMouseMove} className={classList}>\n                <AppHeader/>\n                <MenuList/>\n                <Router>\n                    <Route exact path='/weatherfy' component={Card} />\n                    <Route exact path='/more-info' component={Modal} />\n                </Router>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isThemeDark: state.theme.isThemeDark\n    }\n}\n\nexport default connect(mapStateToProps)(App);\n","import App from './app';\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport {Provider} from 'react-redux';\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}